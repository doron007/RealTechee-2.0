import { a } from '@aws-amplify/data-schema';
import { defineData } from '@aws-amplify/backend';

// Consolidated models from 26 migrated tables
// Generated from CSV to DynamoDB migration

const Affiliates = a.model({
  title: a.string(),
  company: a.string(),
  serviceType: a.string(),
  name: a.string(),
  email: a.email(),
  phone: a.string(),
  createdDate: a.datetime(),
  updatedDate: a.datetime(),
  owner: a.string(),
  workersCompensationInsurance: a.string(),
  license: a.string(),
  environmentalFactor: a.string(),
  oshaCompliance: a.string(),
  signedNda: a.string(),
  safetyPlan: a.string(),
  waterSystem: a.string(),
  numEmployees: a.integer(),
  generalGuidelines: a.string(),
  communication: a.string(),
  materialUtilization: a.string(),
  qualityAssurance: a.string(),
  projectRemnantList: a.boolean(),
  warrantyPeriod: a.string(),
  accounting: a.float(),
  qualifierName: a.string(),
  date: a.datetime(),
  qualifierSignature: a.string(),
  slaAll: a.string(),
  slaCompanyEmail: a.email(),
  linkSla2Name: a.url(),
  contactId: a.id(),
  addressId: a.id(),
}).authorization((allow) => allow.publicApiKey());

const Auth = a.model({
  owner: a.string(),
  email: a.email(),
  hash: a.boolean(),
  token: a.string(),
  createdDate: a.datetime(),
  updatedDate: a.datetime(),
}).authorization((allow) => allow.publicApiKey());

const BackOfficeAssignTo = a.model({
  createdDate: a.datetime(),
  updatedDate: a.datetime(),
  owner: a.string(),
  name: a.string(),
  email: a.email(),
  mobile: a.string(),
  sendEmailNotifications: a.boolean(),
  sendSmsNotifications: a.boolean(),
  active: a.boolean(),
  order: a.integer(),
  contactId: a.id(),
}).authorization((allow) => allow.publicApiKey());

const BackOfficeBookingStatuses = a.model({
  title: a.string(),
  createdDate: a.datetime(),
  updatedDate: a.datetime(),
  owner: a.string(),
  order: a.integer(),
}).authorization((allow) => allow.publicApiKey());

const BackOfficeBrokerage = a.model({
  title: a.string(),
  createdDate: a.datetime(),
  updatedDate: a.datetime(),
  owner: a.string(),
  order: a.float(),
  live: a.boolean(),
}).authorization((allow) => allow.publicApiKey());

const BackOfficeNotifications = a.model({
  createdDate: a.datetime(),
  updatedDate: a.datetime(),
  owner: a.string(),
  key: a.string(),
  to: a.string(),
  cc: a.string(),
  bcc: a.string(),
  subject: a.string(),
  body: a.string(),
  bodyAsSimpleText: a.string(),
}).authorization((allow) => allow.publicApiKey());

const BackOfficeProducts = a.model({
  title: a.string(),
  createdDate: a.datetime(),
  updatedDate: a.datetime(),
  owner: a.string(),
  order: a.integer(),
}).authorization((allow) => allow.publicApiKey());

const BackOfficeProjectStatuses = a.model({
  title: a.string(),
  createdDate: a.datetime(),
  updatedDate: a.datetime(),
  owner: a.string(),
  order: a.integer(),
}).authorization((allow) => allow.publicApiKey());

const BackOfficeQuoteStatuses = a.model({
  title: a.string(),
  createdDate: a.datetime(),
  updatedDate: a.datetime(),
  owner: a.string(),
  order: a.integer(),
}).authorization((allow) => allow.publicApiKey());

const BackOfficeRequestStatuses = a.model({
  title: a.string(),
  createdDate: a.datetime(),
  updatedDate: a.datetime(),
  owner: a.string(),
  order: a.integer(),
}).authorization((allow) => allow.publicApiKey());

const BackOfficeRoleTypes = a.model({
  title: a.string(),
  createdDate: a.datetime(),
  updatedDate: a.datetime(),
  owner: a.string(),
  order: a.integer(),
}).authorization((allow) => allow.publicApiKey());

const ContactUs = a.model({
  submissionTime: a.datetime(),
  contactId: a.id(),
  subject: a.string(),
  message: a.string(),
  product: a.string(),
  owner: a.string(),
  createdDate: a.datetime(),
  updatedDate: a.datetime(),
  addressId: a.id(),
}).authorization((allow) => allow.publicApiKey());

const Contacts = a.model({
  firstName: a.string(),
  lastName: a.string(),
  fullName: a.string(),
  email: a.email(),
  phone: a.string(),
  mobile: a.string(),
  company: a.string(),
  brokerage: a.string(),
  createdDate: a.datetime(),
  updatedDate: a.datetime(),
  owner: a.string(),
  
  // Reverse relationships - see all projects for this contact
  agentProjects: a.hasMany('Projects', 'agentContactId'),
  homeownerProjects: a.hasMany('Projects', 'homeownerContactId'),
  homeowner2Projects: a.hasMany('Projects', 'homeowner2ContactId'),
  homeowner3Projects: a.hasMany('Projects', 'homeowner3ContactId'),
  agentQuotes: a.hasMany('Quotes', 'agentContactId'),
  homeownerQuotes: a.hasMany('Quotes', 'homeownerContactId'),
}).authorization((allow) => allow.publicApiKey());

const Legal = a.model({
  title: a.string(),
  createdDate: a.datetime(),
  updatedDate: a.datetime(),
  owner: a.string(),
  content: a.string(),
  legalDocumentId: a.id(),
  documentId: a.id(),
}).authorization((allow) => allow.publicApiKey());

const MemberSignature = a.model({
  memberEmail: a.email(),
  signature: a.string(),
  initials: a.string(),
  ip: a.string(),
  fullName: a.string(),
  initialsPublicUrl: a.url(),
  initialsWixUrl: a.url(),
  signaturePublicUrl: a.url(),
  signatureWixUrl: a.url(),
  createdDate: a.datetime(),
  updatedDate: a.datetime(),
  owner: a.string(),
}).authorization((allow) => allow.publicApiKey());

const PendingAppoitments = a.model({
  assignedTo: a.string(),
  status: a.string(),
  serviceName: a.string(),
  name: a.string(),
  email: a.email(),
  phone: a.string(),
  agentName: a.string(),
  agentEmail: a.email(),
  agentPhone: a.string(),
  requestAddress: a.string(),
  brokerage: a.string(),
  visitorId: a.id(),
  requestedSlot: a.string(),
  preferredLocation: a.string(),
  requestId: a.id(),
  assignedDate: a.datetime(),
  createdDate: a.datetime(),
  updatedDate: a.datetime(),
  owner: a.string(),
}).authorization((allow) => allow.publicApiKey());

const ProjectComments = a.model({
  postedByContactId: a.id(),
  nickname: a.string(),
  projectId: a.id(),
  files: a.string(),
  comment: a.string(),
  isPrivate: a.boolean(),
  postedByProfileImage: a.string(),
  addToGallery: a.string(),
  createdDate: a.datetime(),
  updatedDate: a.datetime(),
  owner: a.string(),
  
  // Relationships
  project: a.belongsTo('Projects', 'projectId'),
}).authorization((allow) => allow.publicApiKey());

const ProjectMilestones = a.model({
  createdDate: a.datetime(),
  updatedDate: a.datetime(),
  owner: a.string(),
  name: a.string(),
  description: a.string(),
  projectId: a.id(),
  order: a.float(),
  isComplete: a.boolean(),
  estimatedStart: a.string(),
  estimatedFinish: a.datetime(),
  isCategory: a.boolean(),
  isInternal: a.boolean(),
}).authorization((allow) => allow.publicApiKey());

const ProjectPaymentTerms = a.model({
  projectID: a.id(),
  type: a.string(),
  paymentName: a.string(),
  paymentAmount: a.float(),
  paymentDue: a.string(),
  description: a.string(),
  order: a.float(),
  paid: a.id(),
  parentPaymentId: a.id(),
  isCategory: a.boolean(),
  internal: a.boolean(),
  createdDate: a.datetime(),
  updatedDate: a.datetime(),
  owner: a.string(),
}).authorization((allow) => allow.publicApiKey());

const ProjectPermissions = a.model({
  createdDate: a.datetime(),
  updatedDate: a.datetime(),
  projectId: a.id(),
  owner: a.string(),
  na: a.string(),
  permissions: a.boolean(),
}).authorization((allow) => allow.publicApiKey());

const Projects = a.model({
  projectID: a.id(),
  title: a.string(),
  status: a.string(),
  statusImage: a.string(),
  statusOrder: a.float(),
  propertyType: a.string(),
  description: a.string(),
  image: a.string(),
  gallery: a.string(),
  bedrooms: a.float(),
  bathrooms: a.float(),
  floors: a.integer(),
  sizeSqft: a.float(),
  yearBuilt: a.integer(),
  redfinLink: a.url(),
  zillowLink: a.url(),
  originalValue: a.float(),
  listingPrice: a.float(),
  salePrice: a.float(),
  boostPrice: a.float(),
  boosterEstimatedCost: a.float(),
  boosterActualCost: a.float(),
  paidByEscrow: a.string(),
  addedValue: a.float(),
  grossProfit: a.string(),
  estimatedGrossProfit: a.string(),
  paidCost: a.string(),
  daysOnMarket: a.string(),
  revShareAmount: a.float(),
  loanBalance: a.string(),
  carryCost: a.string(),
  openEscrowWithinDays: a.float(),
  carryDays: a.string(),
  boosterActualPrice: a.string(),
  budget: a.string(),
  requestDate: a.datetime(),
  visitReviewDate: a.datetime(),
  createdDate: a.datetime(),
  updatedDate: a.datetime(),
  proposalDate: a.datetime(),
  contractDate: a.datetime(),
  escrowDate: a.datetime(),
  estimatedClosingDate: a.datetime(),
  closingDate: a.datetime(),
  revSharePayDate: a.datetime(),
  underwritingDate: a.datetime(),
  escrowPaymentDate: a.datetime(),
  boosterCompletionDate: a.datetime(),
  invoiceDate: a.datetime(),
  escrowCompanyName: a.string(),
  escrowContactInfo: a.string(),
  excludeFromDashboard: a.boolean(),
  invoiceNumber: a.string(),
  brokerage: a.string(),
  selectedProducts: a.string(),
  signedContracts: a.string(),
  linkProjects1Title2: a.url(),
  estimate: a.string(),
  priceQuoteInfo: a.string(),
  quoteUrl: a.url(),
  documents: a.string(),
  permissionPublic: a.boolean(),
  permissionPrivateRoles: a.boolean(),
  permissionPrivateUsers: a.boolean(),
  projectManagerEmailList: a.email(),
  projectManagerPhone: a.string(),
  visitorId: a.id(),
  quoteId: a.id(),
  requestId: a.id(),
  assignedTo: a.string(),
  assignedDate: a.datetime(),
  officeNotes: a.string(),
  quoteSentDate: a.datetime(),
  quoteOpenedDate: a.datetime(),
  quoteSignedDate: a.datetime(),
  contractingStartDate: a.datetime(),
  contractSentDate: a.datetime(),
  archivedDate: a.datetime(),
  estimatedWeeksDuration: a.string(),
  accountExecutive: a.float(),
  link04ProjectsTitle: a.url(),
  projectAdminProjectId: a.id(),
  owner: a.string(),
  contractUrl: a.url(),
  archived: a.string(),
  item04Projects: a.string(),
  agentContactId: a.id(),
  homeownerContactId: a.id(),
  homeowner2ContactId: a.id(),
  homeowner3ContactId: a.id(),
  addressId: a.id(),
  
  // Relationships - This is the Gen2 superpower!
  agent: a.belongsTo('Contacts', 'agentContactId'),
  homeowner: a.belongsTo('Contacts', 'homeownerContactId'),
  homeowner2: a.belongsTo('Contacts', 'homeowner2ContactId'),
  homeowner3: a.belongsTo('Contacts', 'homeowner3ContactId'),
  address: a.belongsTo('Properties', 'addressId'),
  quotes: a.hasMany('Quotes', 'projectId'),
  comments: a.hasMany('ProjectComments', 'projectId'),
}).authorization((allow) => allow.publicApiKey());

const Properties = a.model({
  propertyFullAddress: a.string(),
  houseAddress: a.string(),
  city: a.string(),
  state: a.string(),
  zip: a.string(),
  propertyType: a.string(),
  bedrooms: a.float(),
  bathrooms: a.float(),
  floors: a.integer(),
  sizeSqft: a.float(),
  yearBuilt: a.integer(),
  redfinLink: a.url(),
  zillowLink: a.url(),
  createdDate: a.datetime(),
  updatedDate: a.datetime(),
  owner: a.string(),
  
  // Reverse relationships - see all projects for this property
  projects: a.hasMany('Projects', 'addressId'),
}).authorization((allow) => allow.publicApiKey());

const QuoteItems = a.model({
  createdDate: a.datetime(),
  updatedDate: a.datetime(),
  owner: a.string(),
  projectID: a.id(),
  itemName: a.string(),
  itemCompleted: a.boolean(),
  parentStageId: a.id(),
  order: a.integer(),
  isCategory: a.boolean(),
  description: a.string(),
  quantity: a.float(),
  unitPrice: a.string(),
  total: a.string(),
  type: a.string(),
  recommendItem: a.boolean(),
  image: a.string(),
  internal: a.boolean(),
  marginPercent: a.float(),
  cost: a.float(),
  price: a.float(),
}).authorization((allow) => allow.publicApiKey());

const Quotes = a.model({
  requestId: a.id(),
  projectId: a.id(),
  status: a.string(),
  statusImage: a.string(),
  statusOrder: a.float(),
  assignedTo: a.string(),
  assignedDate: a.datetime(),
  updatedDate: a.datetime(),
  quoteNumber: a.integer(),
  title: a.string(),
  visitorId: a.id(),
  pdfGeneratorUrl: a.url(),
  document: a.string(),
  documents: a.string(),
  images: a.string(),
  budget: a.float(),
  totalCost: a.float(),
  totalPrice: a.float(),
  product: a.string(),
  operationManagerApproved: a.boolean(),
  underwritingApproved: a.boolean(),
  signed: a.boolean(),
  signee1Name: a.string(),
  signature: a.string(),
  projectedListingPrice: a.float(),
  loanBalance: a.float(),
  creditScore: a.float(),
  eSignatureDocumentId: a.id(),
  quotePdfUrl: a.url(),
  viewedBy: a.string(),
  associatedProject: a.string(),
  changeOrder: a.string(),
  requestDate: a.datetime(),
  visitDate: a.datetime(),
  createdDate: a.datetime(),
  operationManagerApprovedDate: a.datetime(),
  sentDate: a.datetime(),
  openedDate: a.datetime(),
  signedDate: a.datetime(),
  underwritingApprovedDate: a.datetime(),
  contractingStartDate: a.datetime(),
  contractSentDate: a.datetime(),
  contractSignedDate: a.datetime(),
  convertedDate: a.datetime(),
  expiredDate: a.datetime(),
  archivedDate: a.datetime(),
  rejectedDate: a.datetime(),
  brokerage: a.string(),
  officeNotes: a.string(),
  reasonForArchive: a.string(),
  estimatedWeeksDuration: a.string(),
  accountExecutive: a.float(),
  bedrooms: a.string(),
  yearBuilt: a.string(),
  floors: a.string(),
  bathrooms: a.string(),
  sizeSqft: a.string(),
  totalPaymentsByClient: a.string(),
  totalPaymentsToGc: a.string(),
  quoteESignatureId: a.id(),
  owner: a.string(),
  agentContactId: a.id(),
  homeownerContactId: a.id(),
  homeowner2ContactId: a.id(),
  homeowner3ContactId: a.id(),
  addressId: a.id(),
  
  // Relationships
  project: a.belongsTo('Projects', 'projectId'),
  agent: a.belongsTo('Contacts', 'agentContactId'),
  homeowner: a.belongsTo('Contacts', 'homeownerContactId'),
}).authorization((allow) => allow.publicApiKey());

const Requests = a.model({
  createdDate: a.datetime(),
  status: a.string(),
  statusImage: a.string(),
  statusOrder: a.float(),
  accountExecutive: a.float(),
  product: a.string(),
  assignedTo: a.string(),
  assignedDate: a.datetime(),
  message: a.string(),
  relationToProperty: a.string(),
  virtualWalkthrough: a.string(),
  uploadedMedia: a.string(),
  uplodedDocuments: a.string(),
  uploadedVideos: a.string(),
  rtDigitalSelection: a.string(),
  leadSource: a.string(),
  needFinance: a.boolean(),
  leadFromSync: a.string(),
  leadFromVenturaStone: a.string(),
  officeNotes: a.string(),
  archived: a.string(),
  bookingId: a.id(),
  requestedSlot: a.string(),
  requestedVisitDateTime: a.datetime(),
  visitorId: a.id(),
  updatedDate: a.datetime(),
  visitDate: a.datetime(),
  moveToQuotingDate: a.datetime(),
  expiredDate: a.datetime(),
  archivedDate: a.datetime(),
  budget: a.string(),
  owner: a.string(),
  agentContactId: a.id(),
  homeownerContactId: a.id(),
  addressId: a.id(),
}).authorization((allow) => allow.publicApiKey());

const eSignatureDocuments = a.model({
  signed: a.boolean(),
  templateId: a.id(),
  documentData: a.string(),
  pdfGeneratorUrl: a.url(),
  document: a.string(),
  signedBy: a.string(),
  signature: a.string(),
  initials: a.string(),
  quotePdfUrl: a.url(),
  signedDate: a.datetime(),
  signedDocument: a.string(),
  signedPdfGeneratorUrl: a.url(),
  signedQuotePdfPublicUrl: a.url(),
  homeownerEmail: a.email(),
  createdDate: a.datetime(),
  updatedDate: a.datetime(),
  owner: a.string(),
  addressId: a.id(),
}).authorization((allow) => allow.publicApiKey());

const schema = a.schema({
  Affiliates,
  Auth,
  BackOfficeAssignTo,
  BackOfficeBookingStatuses,
  BackOfficeBrokerage,
  BackOfficeNotifications,
  BackOfficeProducts,
  BackOfficeProjectStatuses,
  BackOfficeQuoteStatuses,
  BackOfficeRequestStatuses,
  BackOfficeRoleTypes,
  ContactUs,
  Contacts,
  Legal,
  MemberSignature,
  PendingAppoitments,
  ProjectComments,
  ProjectMilestones,
  ProjectPaymentTerms,
  ProjectPermissions,
  Projects,
  Properties,
  QuoteItems,
  Quotes,
  Requests,
  eSignatureDocuments
});

// Export the data configuration
export const data = defineData({
  schema,
  authorizationModes: {
    defaultAuthorizationMode: 'apiKey',
    apiKeyAuthorizationMode: {
      expiresInDays: 30
    }
  }
});

// Export the schema type for use in other files
export type Schema = typeof schema;
