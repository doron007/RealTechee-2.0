import { a } from '@aws-amplify/data-schema';
import { defineData } from '@aws-amplify/backend';

// Enhanced models to match final CSV structure
const Property = a.model({
  id: a.id().required(),
  propertyFullAddress: a.string(),
  houseAddress: a.string(),
  city: a.string(),
  state: a.string(),
  zip: a.string(),
  propertyType: a.string(),
  bedrooms: a.integer(),
  bathrooms: a.float(),
  floors: a.integer(),
  sizeSqft: a.integer(),
  yearBuilt: a.integer(),
  redfinLink: a.url(),
  zillowLink: a.url(),
  createdDate: a.datetime(),
  updatedDate: a.datetime(),
  owner: a.string()
}).authorization((allow) => allow.publicApiKey());

const Contact = a.model({
  id: a.id().required(),
  firstName: a.string(),
  lastName: a.string(),
  fullName: a.string(),
  email: a.string(),
  phone: a.string(),
  mobile: a.string(),
  company: a.string(),
  brokerage: a.string(),
  createdDate: a.datetime(),
  updatedDate: a.datetime(),
  owner: a.string()
}).authorization((allow) => allow.publicApiKey());

const Project = a.model({
  id: a.id().required(),
  projectID: a.string(),
  title: a.string(),
  status: a.string(),
  statusImage: a.url(),
  statusOrder: a.integer(),
  propertyType: a.string(),
  description: a.string(),
  image: a.url(),
  gallery: a.json(),
  bedrooms: a.integer(),
  bathrooms: a.float(),
  floors: a.integer(),
  sizeSqft: a.integer(),
  yearBuilt: a.integer(),
  redfinLink: a.url(),
  zillowLink: a.url(),
  originalValue: a.float(),
  listingPrice: a.float(),
  salePrice: a.float(),
  boostPrice: a.float(),
  boosterEstimatedCost: a.float(),
  boosterActualCost: a.float(),
  paidByEscrow: a.boolean(),
  addedValue: a.float(),
  grossProfit: a.float(),
  estimatedGrossProfit: a.float(),
  paidCost: a.float(),
  daysOnMarket: a.integer(),
  revShareAmount: a.float(),
  loanBalance: a.float(),
  carryCost: a.float(),
  openEscrowWithinDays: a.integer(),
  carryDays: a.integer(),
  boosterActualPrice: a.float(),
  budget: a.float(),
  requestDate: a.datetime(),
  visitReviewDate: a.datetime(),
  createdDate: a.datetime(),
  updatedDate: a.datetime(),
  proposalDate: a.datetime(),
  contractDate: a.datetime(),
  escrowDate: a.datetime(),
  estimatedClosingDate: a.datetime(),
  closingDate: a.datetime(),
  revSharePayDate: a.datetime(),
  underwritingDate: a.datetime(),
  escrowPaymentDate: a.datetime(),
  boosterCompletionDate: a.datetime(),
  invoiceDate: a.datetime(),
  escrowCompanyName: a.string(),
  escrowContactInfo: a.string(),
  excludeFromDashboard: a.boolean(),
  invoiceNumber: a.string(),
  brokerage: a.string(),
  selectedProducts: a.string(),
  signedContracts: a.json(),
  documents: a.json(),
  permissionPublic: a.boolean(),
  permissionPrivateRoles: a.string(),
  permissionPrivateUsers: a.string(),
  projectManagerEmailList: a.string(),
  projectManagerPhone: a.string(),
  visitorID: a.string(),
  quoteID: a.string(),
  requestId: a.string(),
  assignedTo: a.string(),
  assignedDate: a.datetime(),
  officeNotes: a.string(),
  quoteSentDate: a.datetime(),
  quoteOpenedDate: a.datetime(),
  quoteSignedDate: a.datetime(),
  contractingStartDate: a.datetime(),
  contractSentDate: a.datetime(),
  archivedDate: a.datetime(),
  estimatedWeeksDuration: a.integer(),
  accountExecutive: a.string(),
  projectAdminProjectId: a.string(),
  owner: a.string(),
  contractUrl: a.url(),
  archived: a.boolean(),
  agentContactId: a.string(),
  homeownerContactId: a.string(),
  homeowner2ContactId: a.string(),
  homeowner3ContactId: a.string(),
  addressId: a.string()
}).authorization((allow) => allow.publicApiKey());

const Quote = a.model({
  id: a.id().required(),
  requestId: a.string(),
  projectId: a.string(),
  status: a.string(),
  statusImage: a.url(),
  statusOrder: a.integer(),
  assignedTo: a.string(),
  assignedDate: a.datetime(),
  updatedDate: a.datetime(),
  quoteNumber: a.integer(),
  title: a.string(),
  visitorId: a.string(),
  pdfGeneratorUrl: a.url(),
  document: a.url(),
  documents: a.json(),
  images: a.json(),
  budget: a.float(),
  totalCost: a.float(),
  totalPrice: a.float(),
  product: a.string(),
  operationManagerApproved: a.boolean(),
  underwritingApproved: a.boolean(),
  signed: a.boolean(),
  signee1Name: a.string(),
  signature: a.string(),
  projectedListingPrice: a.float(),
  loanBalance: a.float(),
  creditScore: a.integer(),
  eSignatureDocumentId: a.string(),
  quotePdfUrl: a.url(),
  viewedBy: a.string(),
  associatedProject: a.string(),
  changeOrder: a.boolean(),
  requestDate: a.datetime(),
  visitDate: a.datetime(),
  createdDate: a.datetime(),
  operationManagerApprovedDate: a.datetime(),
  sentDate: a.datetime(),
  openedDate: a.datetime(),
  signedDate: a.datetime(),
  underwritingApprovedDate: a.datetime(),
  contractingStartDate: a.datetime(),
  contractSentDate: a.datetime(),
  contractSignedDate: a.datetime(),
  convertedDate: a.datetime(),
  expiredDate: a.datetime(),
  archivedDate: a.datetime(),
  rejectedDate: a.datetime(),
  brokerage: a.string(),
  officeNotes: a.string(),
  reasonForArchive: a.string(),
  estimatedWeeksDuration: a.integer(),
  accountExecutive: a.string(),
  bedrooms: a.integer(),
  yearBuilt: a.integer(),
  floors: a.integer(),
  bathrooms: a.float(),
  sizeSqft: a.integer(),
  totalPaymentsByClient: a.float(),
  totalPaymentsToGc: a.float(),
  quoteESignatureId: a.string(),
  owner: a.string(),
  agentContactId: a.string(),
  homeownerContactId: a.string(),
  homeowner2ContactId: a.string(),
  homeowner3ContactId: a.string(),
  addressId: a.string()
}).authorization((allow) => allow.publicApiKey());

const Request = a.model({
  id: a.id().required(),
  createdDate: a.datetime(),
  status: a.string(),
  statusImage: a.url(),
  statusOrder: a.integer(),
  accountExecutive: a.string(),
  product: a.string(),
  assignedTo: a.string(),
  assignedDate: a.datetime(),
  message: a.string(),
  relationToProperty: a.string(),
  virtualWalkthrough: a.boolean(),
  uploadedMedia: a.json(),
  uploadedDocuments: a.json(),
  uploadedVideos: a.json(),
  rtDigitalSelection: a.string(),
  leadSource: a.string(),
  needFinance: a.boolean(),
  leadFromSync: a.boolean(),
  leadFromVenturaStone: a.boolean(),
  officeNotes: a.string(),
  archived: a.boolean(),
  bookingId: a.string(),
  requestedSlot: a.string(),
  requestedVisitDateTime: a.datetime(),
  visitorId: a.string(),
  updatedDate: a.datetime(),
  visitDate: a.datetime(),
  moveToQuotingDate: a.datetime(),
  expiredDate: a.datetime(),
  archivedDate: a.datetime(),
  budget: a.float(),
  owner: a.string(),
  agentContactId: a.string(),
  homeownerContactId: a.string(),
  addressId: a.string()
}).authorization((allow) => allow.publicApiKey());

const ContactUs = a.model({
  id: a.id().required(),
  submissionTime: a.datetime(),
  contactId: a.string(),
  subject: a.string(),
  message: a.string(),
  product: a.string(),
  owner: a.string(),
  createdDate: a.datetime(),
  updatedDate: a.datetime(),
  addressId: a.string()
}).authorization((allow) => allow.publicApiKey());

const schema = a.schema({
  Property,
  Contact,
  Project,
  Quote,
  Request,
  ContactUs
});

// Export the data configuration
export const data = defineData({
  schema,
  authorizationModes: {
    defaultAuthorizationMode: 'apiKey',
    apiKeyAuthorizationMode: {
      expiresInDays: 30
    }
  }
});

// Export the schema type for use in other files
export type Schema = typeof schema;