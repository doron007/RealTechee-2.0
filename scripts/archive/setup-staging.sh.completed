#!/bin/bash

# Create Staging Environment for Amplify Gen 2
# This script helps you set up a proper staging environment

set -e

GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

echo_step() {
  echo -e "${GREEN}==>${NC} $1"
}

echo_info() {
  echo -e "${BLUE}INFO:${NC} $1"
}

echo_warn() {
  echo -e "${YELLOW}WARNING:${NC} $1"
}

echo_step "üèóÔ∏è  Setting up Amplify Gen 2 Staging Environment"

echo_info "This will create a staging environment separate from your sandbox."
echo_info "Staging should mirror production configuration and contain production-like data."

# Step 1: Create staging branch
echo_step "1Ô∏è‚É£  Creating staging branch..."

if git rev-parse --verify staging >/dev/null 2>&1; then
  echo_warn "Staging branch already exists"
  git checkout staging
  git pull origin staging
else
  git checkout -b staging
  git push -u origin staging
fi

# Step 2: Set up staging sandbox
echo_step "2Ô∏è‚É£  Setting up staging sandbox..."

echo_info "You'll need to deploy a staging sandbox with a different identifier"
echo_info "This creates separate infrastructure from your dev sandbox"

# Deploy staging sandbox
npx ampx sandbox --identifier staging --region us-west-1 --watch &

echo_info "Staging sandbox is deploying..."
echo_info "This will create new DynamoDB tables with 'staging' identifier"

sleep 30  # Give it time to start

# Step 3: Configure staging environment
echo_step "3Ô∏è‚É£  Next steps for staging setup..."

cat << EOF

üìã MANUAL STEPS TO COMPLETE STAGING SETUP:

1. **Wait for staging deployment** (check status):
   npx ampx sandbox status --identifier staging

2. **Update staging environment variables**:
   - Copy amplify_outputs.json to staging-amplify_outputs.json
   - Update your deployment scripts to use staging config

3. **Set up staging in Amplify Console**:
   - Go to AWS Amplify Console
   - Connect staging branch to new Amplify app
   - Configure environment variables

4. **Sync production data to staging**:
   # After staging is ready, sync production data
   ./scripts/sync-prod-to-staging.sh

5. **Configure CI/CD Pipeline**:
   - Set up GitHub Actions or similar
   - Auto-deploy staging on push to staging branch
   - Run tests before promoting to production

üîÑ RECOMMENDED WORKFLOW:
   
   Development ‚Üí Sandbox (doron)
        ‚Üì
   Feature Branch ‚Üí Staging Environment  
        ‚Üì
   Pull Request ‚Üí Production Environment

üìÅ ENVIRONMENT STRUCTURE:
   
   ‚Ä¢ sandbox-doron: Your personal development environment
   ‚Ä¢ staging: Team testing with production-like data  
   ‚Ä¢ production: Live environment

EOF

echo_step "‚úÖ Staging branch created and deployment started"
echo_info "Complete the manual steps above to finish staging setup"
