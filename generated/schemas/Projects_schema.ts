// Generated Amplify schema for Projects
// Source: Projects.csv (64 records)

import { type ClientSchema, a, defineData } from '@aws-amplify/backend';

const projectsSchema = a.schema({
  Projects: a
    .model({
      ID: a.id().required(),
      projectID: a.id(),
      title: a.string(),
      status: a.string(),
      statusImage: a.string(),
      statusOrder: a.float(),
      propertyType: a.string(),
      description: a.string(),
      image: a.string(),
      gallery: a.string(),
      bedrooms: a.float(),
      bathrooms: a.float(),
      floors: a.float(),
      sizeSqft: a.float(),
      yearBuilt: a.float(),
      redfinLink: a.url(),
      zillowLink: a.url(),
      originalValue: a.float(),
      listingPrice: a.float(),
      salePrice: a.float(),
      boostPrice: a.float(),
      boosterEstimatedCost: a.float(),
      boosterActualCost: a.float(),
      paidByEscrow: a.string(),
      addedValue: a.float(),
      grossProfit: a.string(),
      estimatedGrossProfit: a.string(),
      paidCost: a.string(),
      daysOnMarket: a.string(),
      revShareAmount: a.float(),
      loanBalance: a.string(),
      carryCost: a.string(),
      openEscrowWithinDays: a.float(),
      carryDays: a.string(),
      boosterActualPrice: a.string(),
      budget: a.string(),
      requestDate: a.datetime(),
      visitReviewDate: a.datetime(),
      createdDate: a.datetime(),
      updatedDate: a.datetime(),
      proposalDate: a.datetime(),
      contractDate: a.datetime(),
      escrowDate: a.datetime(),
      estimatedClosingDate: a.datetime(),
      closingDate: a.datetime(),
      revSharePayDate: a.datetime(),
      underwritingDate: a.datetime(),
      escrowPaymentDate: a.datetime(),
      boosterCompletionDate: a.datetime(),
      invoiceDate: a.datetime(),
      escrowCompanyName: a.string(),
      escrowContactInfo: a.string(),
      excludeFromDashboard: a.boolean(),
      invoiceNumber: a.float(),
      brokerage: a.string(),
      selectedProducts: a.string(),
      signedContracts: a.string(),
      linkProjects1Title2: a.url(),
      estimate: a.string(),
      priceQuoteInfo: a.string(),
      quoteUrl: a.url(),
      documents: a.string(),
      permissionPublic: a.boolean(),
      permissionPrivateRoles: a.boolean(),
      permissionPrivateUsers: a.boolean(),
      projectManagerEmailList: a.email(),
      projectManagerPhone: a.string(),
      visitorId: a.id(),
      quoteId: a.id(),
      requestId: a.id(),
      assignedTo: a.string(),
      assignedDate: a.datetime(),
      officeNotes: a.string(),
      quoteSentDate: a.datetime(),
      quoteOpenedDate: a.datetime(),
      quoteSignedDate: a.datetime(),
      contractingStartDate: a.datetime(),
      contractSentDate: a.datetime(),
      archivedDate: a.datetime(),
      estimatedWeeksDuration: a.string(),
      accountExecutive: a.float(),
      link04ProjectsTitle: a.url(),
      projectAdminProjectId: a.id(),
      Owner: a.string(),
      contractUrl: a.url(),
      archived: a.string(),
      item04Projects: a.string(),
      agentContactId: a.id(),
      homeownerContactId: a.id(),
      homeowner2ContactId: a.id(),
      homeowner3ContactId: a.id(),
      addressId: a.id(),
    })
    .authorization((allow) => [allow.publicApiKey()]),
});

export type ProjectsSchema = ClientSchema<typeof projectsSchema>;

export const projectsData = defineData({
  schema: projectsSchema,
  authorizationModes: {
    defaultAuthorizationMode: 'apiKey',
    apiKeyAuthorizationMode: {
      expiresInDays: 30,
    },
  },
});