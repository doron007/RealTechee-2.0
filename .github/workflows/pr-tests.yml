name: PR Test Suite

on:
  pull_request:
    branches: [ main, develop ]
    types: [opened, synchronize, reopened]

# Cancel previous workflow runs for the same PR
concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

jobs:
  # Quick smoke tests for PRs
  smoke-tests:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Install Playwright Browsers
      run: npx playwright install --with-deps chromium
      
    - name: Run critical path tests
      run: |
        # Run a subset of critical tests for faster feedback
        npx playwright test --project=public-homepage --grep="should load homepage without errors"
        npx playwright test --project=auth-flows --grep="should load login page without errors"
        npx playwright test --project=isolated-admin-projects --grep="should load projects page without errors"
      env:
        CI: true
        TEST_USER_EMAIL: ${{ secrets.TEST_USER_EMAIL || 'info@realtechee.com' }}
        TEST_USER_PASSWORD: ${{ secrets.TEST_USER_PASSWORD || 'Sababa123!' }}
        
    - name: Upload smoke test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: smoke-test-results
        path: playwright-report/
        retention-days: 3

  # Lint and type checking
  code-quality:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run TypeScript type checking
      run: npm run type-check
      continue-on-error: true
      
    - name: Run ESLint
      run: npm run lint
      continue-on-error: true
      
    - name: Build check
      run: npm run build
      env:
        CI: true

  # Test comment with results
  test-comment:
    runs-on: ubuntu-latest
    needs: [smoke-tests, code-quality]
    if: always() && github.event_name == 'pull_request'
    
    steps:
    - name: Comment test results
      uses: actions/github-script@v7
      with:
        script: |
          const smokeTestResult = '${{ needs.smoke-tests.result }}';
          const codeQualityResult = '${{ needs.code-quality.result }}';
          
          let comment = '## 🧪 Test Results Summary\n\n';
          
          // Smoke tests
          if (smokeTestResult === 'success') {
            comment += '✅ **Smoke Tests**: All critical paths passing\n';
          } else if (smokeTestResult === 'failure') {
            comment += '❌ **Smoke Tests**: Some tests failed - please check the logs\n';
          } else {
            comment += '⚠️ **Smoke Tests**: Tests were skipped or cancelled\n';
          }
          
          // Code quality
          if (codeQualityResult === 'success') {
            comment += '✅ **Code Quality**: TypeScript and linting checks passed\n';
          } else if (codeQualityResult === 'failure') {
            comment += '❌ **Code Quality**: Type errors or linting issues found\n';
          } else {
            comment += '⚠️ **Code Quality**: Checks were skipped or cancelled\n';
          }
          
          comment += '\n---\n';
          comment += '_Full test suite will run after merge to main branch_\n';
          comment += `_Triggered by: ${context.payload.pull_request.head.sha.substring(0, 7)}_`;
          
          // Find existing comment and update or create new
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });
          
          const existingComment = comments.find(c => 
            c.user.type === 'Bot' && c.body.includes('🧪 Test Results Summary')
          );
          
          if (existingComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: existingComment.id,
              body: comment
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });
          }